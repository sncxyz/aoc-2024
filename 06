import run, nd;

use nd.(Vec2, Matrix, v, vector.(n, s, e, w));

fn main() run.day 6 shared part_1 part_2;

fn shared(input) {
    map := Matrix.new(input split '\n');
    guard := map enumerate find (\(x) x[1] == '^');
    start := guard[0];
    map[start] = '.';
    pos := start;
    dir := n();
    visited := Map.new();
    visited[pos] = dir;
    while map in_bounds (pos + dir) {
        if map[pos + dir] == '#' {
            dir perp=;
        } else {
            pos += dir;
            if visited contains pos not {
                visited[pos] = dir;
            }
        }
    }
    return [map, visited remove start];
}

fn part_1(input) input[1] len + 1;

fn part_2(input) {
    map := input[0];
    candidates := input[1];

    width := map width;
    height := map height;

    up := Matrix.init(width, height, nil);
    for x in 0 to width {
        dest := nil;
        for y in 0 to height {
            if map[v(x, y)] == '#' {
                dest = v(x, y + 1);
            } else {
                up[v(x, y)] = dest;
            }
        }
    }

    right := Matrix.init(width, height, nil);
    for y in 0 to height {
        dest := nil;
        for x in 0 to width rev {
            if map[v(x, y)] == '#' {
                dest = v(x - 1, y);
            } else {
                right[v(x, y)] = dest;
            }
        }
    }

    down := Matrix.init(width, height, nil);
    for x in 0 to width {
        dest := nil;
        for y in 0 to height rev {
            if map[v(x, y)] == '#' {
                dest = v(x, y - 1);
            } else {
                down[v(x, y)] = dest;
            }
        }
    }

    left := Matrix.init(width, height, nil);
    for y in 0 to height {
        dest := nil;
        for x in 0 to width {
            if map[v(x, y)] == '#' {
                dest = v(x + 1, y);
            } else {
                left[v(x, y)] = dest;
            }
        }
    }

    dests := [up, right, down, left];
    total := 0;

    for candidate in candidates pairs {
        obstr := candidate[0];
        dir := candidate[1];
        start := obstr - dir;
        start_dir := [w(), n(), e(), s()] position \(d) d == dir;

        tortoise := start;
        hare := start;
        tortoise_dir := start_dir;
        hare_dir := start_dir;
        
        loop {
            dest := apply_obstr(hare, hare_dir, dests[hare_dir][hare], obstr);
            if dest {
                hare = dest;
            } else {
                break;
            }
            hare_dir = hare_dir + 1 mod 4;
            
            dest = apply_obstr(hare, hare_dir, dests[hare_dir][hare], obstr);
            if dest {
                hare = dest;
            } else {
                break;
            }
            hare_dir = hare_dir + 1 mod 4;

            tortoise = apply_obstr(tortoise, tortoise_dir, dests[tortoise_dir][tortoise], obstr);
            tortoise_dir = tortoise_dir + 1 mod 4;

            if tortoise == hare & (tortoise_dir == hare_dir) {
                total += 1;
                break;
            }
        }
    }

    return total;
}

fn apply_obstr(start, dir, end, obstr) {
    if dir == 0 and (obstr.x == start.x) and (obstr.y < start.y) and (not end or (obstr.y >= end.y)) {
        return v(obstr.x, obstr.y + 1);
    }
    if dir == 1 and (obstr.y == start.y) and (obstr.x > start.x) and (not end or (obstr.x <= end.x)) {
        return v(obstr.x - 1, obstr.y);
    }
    if dir == 2 and (obstr.x == start.x) and (obstr.y > start.y) and (not end or (obstr.y <= end.y)) {
        return v(obstr.x, obstr.y - 1);
    }
    if dir == 3 and (obstr.y == start.y) and (obstr.x < start.x) and (not end or (obstr.x >= end.x)) {
        return v(obstr.x + 1, obstr.y);
    }
    return end;
}
